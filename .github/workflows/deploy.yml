name: Deploy Churn API to EC2

on:
  push:
    branches:
      - main

permissions:
  contents: read
  packages: write
  id-token: write

env:
  IMAGE_NAME: ghcr.io/michael-cool/telco-churn-api
  IMAGE_TAG: v1.0.${{ github.run_number }}

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      # === 1Ô∏è‚É£ Code auschecken ===
      - name: Checkout repository
        uses: actions/checkout@v4

      # === 2Ô∏è‚É£ Python Setup & Linting ===
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          pip install --no-cache-dir -r requirements.txt
          pip install flake8 pytest

      - name: Lint with flake8
        run: flake8 src/api --max-line-length=120

      # === 3Ô∏è‚É£ Docker Build & Push ===
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: michael-cool
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and push Docker image
        run: |
          echo "üöÄ Building image $IMAGE_NAME:$IMAGE_TAG ..."
          docker buildx build --platform linux/amd64 -t $IMAGE_NAME:$IMAGE_TAG --push .
          echo "‚úÖ Image pushed successfully."

      # === 4Ô∏è‚É£ Deployment auf EC2 ===
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            IMAGE_NAME="ghcr.io/michael-cool/telco-churn-api"
            IMAGE_TAG="v1.0.${{ github.run_number }}"

            echo "üîê Logging into GHCR..."
            docker login ghcr.io -u michael-cool -p ${{ secrets.GHCR_PAT }}

            echo "üåÄ Pulling latest image..."
            docker pull $IMAGE_NAME:$IMAGE_TAG

            echo "üßπ Stopping old container..."
            docker stop churn-api || true
            docker rm churn-api || true

            echo "üì¶ Running new container..."
            docker run -d -p 8000:8000 --name churn-api $IMAGE_NAME:$IMAGE_TAG

      # === 5Ô∏è‚É£ Fallback-Modell automatisch aktualisieren ===
      - name: Update fallback model on EC2
        if: success()  # nur bei erfolgreichem Deployment
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "üåÄ Checking for active model..."
            MODEL_PATH=$(docker exec churn-api bash -c "test -f src/models/xgboost_model.pkl && echo 'exists'")
            if [ "$MODEL_PATH" = "exists" ]; then
              echo "üîÅ Copying current model to previous_model.pkl..."
              docker exec churn-api bash -c "cp src/models/xgboost_model.pkl src/models/previous_model.pkl"
              echo "‚úÖ previous_model.pkl updated successfully."
            else
              echo "‚ö†Ô∏è No current model found ‚Äì fallback not updated."
            fi
